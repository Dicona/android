// taze: document.fonts.ready from //third_party/javascript/typings/css_font_loading_module

import 'jasmine';

import {Axe} from 'google3/testing/js/jasmine/axe';
import {Scuba} from 'google3/testing/karma/karma_scuba_framework';
import {ComparisonOptions, DiffResult, Status} from 'google3/testing/screendiffing/typescript/proto_parsing/proto_types';

/** The type of the `module` variable generated by all TypeScript files. */
export interface ModuleSpec {
  id: string;
}

/** Config object for changing aXe behavior. */
export interface AxeConfig {
  /**
   * CSS selectors for elements that should be excluded from accessibility
   * checks.
   */
  excludeSelectors?: string[];
}

/** Config object for setting the behavior of KarmaTestEnv. */
export interface KarmaTestEnvConfig {
  /**
   * Whether to enable Scuba checking in tests. This can optionally be the Scuba
   * comparison options to use.
   *
   * When this option is set it will enable screenshot diffs in verifyState.
   */
  scuba?: boolean|ComparisonOptions;
  /**
   * Whether to enable aXe checking in tests. This can optionally be an Axe
   * config object used to configure the aXe instance.
   *
   * When this option is set it will enable aXe checks in verifyState.
   */
  axe?: boolean|AxeConfig;
}

const DEFAULT_COMPARISON_OPTIONS: ComparisonOptions = {
  // Allow for small differences due to rendering flakiness
  allowableNumberPixelsDifferent: 20,
};

/**
 * Utility to remove most of the boilerplate for Web Driver tests.
 *
 * This object automatically updates itself for each test (new webdriver
 * instance). In cases where state can be shared between tests it will be (file
 * server, scuba differ).
 *
 *
 * Example Usage:
 *
 *     describe('tests', () => {
 *       const env = new KarmaTestEnv(module, {
 *         scuba: true,
 *         axe: true,
 *       });
 *
 *       it('test', async () => {
 *         const component = await setupComponent();
 *         await env.verifyState(component, 'initial_state');
 *       });
 *     });
 */
export class KarmaTestEnv {
  readonly scuba: Scuba|undefined;
  private readonly axeConfig: AxeConfig|undefined;

  constructor(module: ModuleSpec, config: KarmaTestEnvConfig) {
    if (config.scuba) {
      const lastSlash = module.id.lastIndexOf('/');
      const dirName = module.id.slice(0, lastSlash);
      const goldensPath = `${dirName}/scuba_goldens/`;
      const comparisonOptions = Object.assign(
          {}, DEFAULT_COMPARISON_OPTIONS, config.scuba || {});
      this.scuba = new Scuba(goldensPath, {comparisonOptions});
    }

    if (config.axe) {
      if (typeof config.axe === 'boolean') {
        this.axeConfig = {};
      } else {
        this.axeConfig = config.axe;
      }
    }

    // Ensure any fonts on the page have loaded before running tests
    beforeAll(async () => {
      if (document.fonts) {
        await document.fonts.ready;
      }
    });
  }

  /**
   * Capture and verify a screenshot of the page or the given element.
   */
  async diffScreenshot(name: string, cssSelector: string) {
    if (!this.scuba) throw new Error('Scuba not configured');

    const result: DiffResult = await this.scuba.diffElement(name, cssSelector);

    expect(result.resultType)
        .withContext(`Non-passing screenshot result for ${name}`)
        .toBe(Status.PASSED);
  }

  /**
   * Run an aXe check on the page or the given element.
   */
  async runAxeCheck(name: string, cssSelector: string) {
    if (!this.axeConfig) throw new Error('aXe not configured');

    const axeRunner = new Axe({
      include: cssSelector,
      exclude: this.axeConfig.excludeSelectors,
      rules: {
        // This rule has a false positive violation on mat-select. It reports
        // the element (role="listbox") being empty and having no role="option"
        // children. This is a false positive violation introduced in 3.4.1.
        // https://github.com/dequelabs/axe-core/issues/874#issuecomment-515534909
        'aria-required-children': false,
      },
    });
    await axeRunner.expectNoA11yViolations();
  }

  /**
   * Verify the state of the page or element for any checks enabled in the env
   * config (scuba, aXe, etc).
   *
   * @param name name to use for any reports generated by checks
   * @param cssSelector css selector for the element to be checked
   */
  async verifyState(name: string, cssSelector: string) {
    if (this.scuba) {
      await this.diffScreenshot(name, cssSelector);
    }

    if (this.axeConfig) {
      await this.runAxeCheck(name, cssSelector);
    }
  }
}
